[Config SafeNestSimulation]
network = SafeNestSimulation
description = Communication between various sensors in a Safe Nest Lock System with AODV routing 
sim-time-limit = 900s

#Deafult Area constraints
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 500m #Max X axis
**.constraintAreaMaxY = 500m #Max Y Axis
**.constraintAreaMaxZ = 0m

#Configurations for all the hosts
*.host*.ipv4.arp.typename = "GlobalArp"
*.configurator.addStaticRoutes = false

#Configurations for Camera Sensor Host: Responsible for sending out UDP Packets
*.hostCameraSensor.numApps = 1
*.hostCameraSensor.app[0].typename = "UdpBasicApp" #Transmitting the UDP packets
*.hostCameraSensor.app[0].destAddresses = "hostWirelessController" #Specifying destination: hostCameraSensor transmits UDP packets to hostWirelessController
*.hostCameraSensor.app[0].destPort = 5000
*.hostCameraSensor.app[0].messageLength = 1024B #Packet Size
*.hostCameraSensor.app[0].sendInterval = 0.33s #hostCameraSensor made as a CBR source that emits UDP packets at a rate of 3 packets/second i.e. 1 packet/0.33 sec
*.hostCameraSensor.app[0].packetName = "Data" #Name of the data packets

#Configurations for PI Magnetic Sensor Host: Responsible for sending out UDP Packets
*.hostPIMagneticSensor.numApps = 1
*.hostPIMagneticSensor.app[0].typename = "UdpBasicApp" #Transmitting the UDP packets
*.hostPIMagneticSensor.app[0].destAddresses = "hostWirelessController" #Specifying destination: hostCameraSensor transmits UDP packets to hostWirelessController
*.hostPIMagneticSensor.app[0].destPort = 5000
*.hostPIMagneticSensor.app[0].messageLength = 512B #Packet Size
*.hostPIMagneticSensor.app[0].sendInterval = 0.33s #hostPIMagneticSensor made as a CBR source that emits UDP packets at a rate of 3 packets/second i.e. 1 packet/0.33 sec
*.hostPIMagneticSensor.app[0].packetName = "Data" #Name of the data packets

#Configurations for Weather Sensor Host: Responsible for sending out UDP Packets
*.hostWeatherSensor1.numApps = 1
*.hostWeatherSensor1.app[0].typename = "UdpBasicApp" #Transmitting the UDP packets
*.hostWeatherSensor1.app[0].destAddresses = "hostWirelessController" #Specifying destination: hostCameraSensor transmits UDP packets to hostWirelessController
*.hostWeatherSensor1.app[0].destPort = 5000
*.hostWeatherSensor1.app[0].messageLength = 64B #Packet Size
*.hostWeatherSensor1.app[0].sendInterval = 0.13s #hostWeatherSensor1 made as a CBR source that emits UDP packets at a rate of 3 packets/second i.e. 1 packet/0.33 sec
*.hostWeatherSensor1.app[0].packetName = "Data1" #Name of the data packets

*.hostWeatherSensor2.numApps = 1
*.hostWeatherSensor2.app[0].typename = "UdpBasicApp" #Transmitting the UDP packets
*.hostWeatherSensor2.app[0].destAddresses = "hostWirelessController" #Specifying destination: hostCameraSensor transmits UDP packets to hostWirelessController
*.hostWeatherSensor2.app[0].destPort = 5000
*.hostWeatherSensor2.app[0].messageLength = 64B #Packet Size
*.hostWeatherSensor2.app[0].sendInterval = 0.13s #hostWeatherSensor2 made as a CBR source that emits UDP packets at a rate of 3 packets/second i.e. 1 packet/0.33 sec
*.hostWeatherSensor2.app[0].packetName = "Data2" #Name of the data packets

*.hostWeatherSensor3.numApps = 1
*.hostWeatherSensor3.app[0].typename = "UdpBasicApp" #Transmitting the UDP packets
*.hostWeatherSensor3.app[0].destAddresses = "hostWirelessController" #Specifying destination: hostCameraSensor transmits UDP packets to hostWirelessController
*.hostWeatherSensor3.app[0].destPort = 5000
*.hostWeatherSensor3.app[0].messageLength = 64B #Packet Size
*.hostWeatherSensor3.app[0].sendInterval = 0.13s #hostWeatherSensor3 made as a CBR source that emits UDP packets at a rate of 3 packets/second i.e. 1 packet/0.33 sec
*.hostWeatherSensor3.app[0].packetName = "Data3" #Name of the data packets

#Configurations for Motion PI Sensor Host: Responsible for sending out UDP Packets
*.hostMotionSensor.numApps = 1
*.hostMotionSensor.app[0].typename = "UdpBasicApp" #Transmitting the UDP packets
*.hostMotionSensor.app[0].destAddresses = "hostWirelessController" #Specifying destination: hostCameraSensor transmits UDP packets to hostWirelessController
*.hostMotionSensor.app[0].destPort = 5000
*.hostMotionSensor.app[0].messageLength = 64B #Packet Size
*.hostMotionSensor.app[0].sendInterval = 0.13s # hostMotionSensor made as a CBR source that emits UDP packets at a rate of 3 packets/second i.e. 1 packet/0.33 sec
*.hostMotionSensor.app[0].packetName = "Data4" #Name of the data packets

#Configurations for Host Wireless Controller : Responsible for receiving UDP packets
*.hostWirelessController.numApps = 1
*.hostWirelessController.app[0].typename = "UdpSink" #Receive all the UDP packets sent by the various sensors
*.hostWirelessController.app[0].localPort = 5000

#Radio Configuration : Mac configured as IEEE802.11
*.host*.wlan[*].mgmt.typename = "Ieee80211MgmtAdhoc"
*.host*.wlan[*].agent.typename = ""
*.host*.wlan[*].radio.typename = "Ieee80211UnitDiskRadio"
*.host*.wlan[*].radio.transmitter.communicationRange = 100m #Communication range for each host configured as 100meters
*.host*.wlan[*].bitrate = 11Mbps ##Bit rate = 11 Mbps

#Setting up static routing
*.host*.forwarding = true

#Assigning IP address to all the nodes
*.configurator.config = xml("<config><interface hosts='**' address='10.0.0.x' netmask='255.255.255.0'/><autoroute metric='errorRate'/></config>")
*.configurator.optimizeRoutes = false
*.host*.ipv4.routingTable.netmaskRoutes = ""

#Visualizations
*.hostCameraSensor.wlan[0].radio.displayCommunicationRange = true
*.hostPIMagneticSensor.wlan[0].radio.displayCommunicationRange = true
*.hostWeatherSensor1.wlan[0].radio.displayCommunicationRange = true
*.hostWeatherSensor2.wlan[0].radio.displayCommunicationRange = true
*.hostWeatherSensor3.wlan[0].radio.displayCommunicationRange = true
*.hostMotionSensor.wlan[0].radio.displayCommunicationRange = true
*.hostWirelessController.wlan[0].radio.displayCommunicationRange = true
*.visualizer.mediumVisualizer.displaySignals = true
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.dataLinkVisualizer.packetFilter = "AODV*"


